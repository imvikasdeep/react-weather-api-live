{"version":3,"sources":["components/weatherData.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherData","currentTemp","this","props","data","JSON","stringify","minTemp","maxTemp","currentDate","Date","weatherIcon","weatherIconUrl","className","city","format","withTitle","src","title","weather","alt","slice","Component","API_KEY","App","state","undefined","currentInput","error","displayWeather","handleInput","e","cityName","target","value","setState","handleSearch","a","preventDefault","fetch","response","json","weatherData","console","log","main","temp","temp_max","temp_min","icon","name","currentWeather","displayWeatherData","Fragment","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9bd335ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nclass WeatherData extends Component {\r\n    \r\n    render() {\r\n\r\n        const currentTemp = this.props.data.currentTemp ? JSON.stringify(this.props.data.currentTemp) : '';\r\n        const minTemp = this.props.data.minTemp ? JSON.stringify(this.props.data.minTemp) : '';\r\n        const maxTemp = this.props.data.maxTemp ? JSON.stringify(this.props.data.maxTemp) : '';\r\n        var currentDate = new Date();\r\n        var weatherIcon = this.props.data.weatherIcon;\r\n        var weatherIconUrl = `https://openweathermap.org/img/wn/${weatherIcon}@2x.png`;\r\n\r\n        return ( \r\n            \r\n        <div className=\"app-container\">\r\n            <div className=\"overview\">\r\n                <h1>{this.props.data.city}</h1>\r\n                <p><Moment format=\"D MMM YYYY\" withTitle>{currentDate}</Moment></p>\r\n                <div className=\"weatherIcon\">\r\n                    <img src={weatherIconUrl} title={this.props.data.weather} alt={this.props.data.weather}/>\r\n                    <p>{this.props.data.weather}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <h2 className=\"current-temp\">{currentTemp.slice(0, 2)}&#176;</h2>\r\n                <div className=\"min-max-temp\">\r\n                    <div>\r\n                        <p>{minTemp.slice(0, 2)}&#176;</p>\r\n                        <span>MIN</span>\r\n                    </div>\r\n                    <div>/</div>\r\n                    <div>\r\n                        <p>{maxTemp.slice(0, 2)}&#176;</p>\r\n                        <span>MAX</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\n \r\nexport default WeatherData;","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherData from './components/weatherData';\n\nconst API_KEY = '381f704d6e457245921227d66a16f52f';\n\nclass App extends Component {\n\n  state = {\n    currentTemp: undefined,\n    minTemp: undefined,\n    maxTemp: undefined,\n    weather: undefined,\n    weatherIcon: undefined,\n    city: 'Delhi',\n    currentInput: '',\n    error: '',\n    displayWeather: false, \n  }\n\n  handleInput = (e) => {\n    const cityName = e.target.value;\n    this.setState({\n      currentInput: cityName\n    });\n  }\n\n  handleSearch = async e => {\n    e.preventDefault();\n    \n    const cityName = this.state.city;\n\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.currentInput}&appid=${API_KEY}&units=metric`);\n    const weatherData = await response.json();\n    console.log(weatherData)\n       \n    if (cityName) {\n      this.setState({\n        currentTemp: weatherData.main.temp,\n        maxTemp: weatherData.main.temp_max,\n        minTemp: weatherData.main.temp_min,\n        weather: weatherData.weather[0].main,\n        weatherIcon: weatherData.weather[0].icon,\n        city: weatherData.name,\n        displayWeather: true\n      });\n    }\n    \n  }\n\n  currentWeather () {\n    const currentWeather = this.state.weather ? this.state.weather : \"\";\n    return currentWeather;\n  }\n\n  displayWeatherData () {\n    const displayWeatherData = this.state.displayWeather ? <WeatherData data={this.state}></WeatherData> : '';\n    return displayWeatherData;\n  }\n\n  render() {\n      return (\n\n        <React.Fragment>\n          \n          <div className=\"appWrapper\">\n\n            <form onSubmit={this.handleSearch}>\n              <input type=\"text\" placeholder=\"Enter City Name\" onChange={this.handleInput} value={this.state.currentInput} />\n              <p>{this.state.error}</p>\n            </form>\n\n            {this.displayWeatherData()}\n\n          </div>\n\n        </React.Fragment>\n\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}